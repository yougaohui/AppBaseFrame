apply plugin: 'com.android.application'
apply plugin: 'com.jakewharton.butterknife'
apply plugin: 'org.greenrobot.greendao'
apply from: '../dependencies.gradle'

def releaseTime() {
    return new Date().format("yyyyMMdd", TimeZone.getTimeZone("UTC"))
}

android {
    compileSdkVersion versions.compileSdk
    buildToolsVersion versions.buildTools

    defaultConfig {
        applicationId "com.ygh.appframe"
        minSdkVersion versions.minSdk
        targetSdkVersion versions.compileSdk
        versionCode versions.publishVersionCode
        versionName versions.publishVersion
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        ndk {
            //设置支持的SO库架构
            abiFilters 'armeabi' //, 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'
        }
        // 开启multidex
        multiDexEnabled true
        //添加一个默认渠道号
        manifestPlaceholders = [UMENG_CHANNEL_VALUE: "umeng"]
    }

    //greendao 数据库配置文件
    greendao {
        //指定数据库schema版本号，迁移等操作会用到
        schemaVersion 1
        //daoPackage 包名
        daoPackage 'com.ygh.appframe.dao'
        //这就是我们上面说到的自定义生成数据库文件的目录了，可以将生成的文件放到我们的java目录中，而不是build中，这样就不用额外的设置资源目录了
        targetGenDir 'src/main/java'
    }

    dexOptions {
        jumboMode = true
        maxProcessCount 4
        javaMaxHeapSize "2g"
    }

    //执行lint检查，有任何的错误或者警告提示，都会终止构建，我们可以将其关掉。
    lintOptions {
        abortOnError false
    }

    //https://www.cnblogs.com/permanent2012moira/p/5126276.html
    //签名配置
    signingConfigs {
        debug {
        }
        release {// 自己的签名文件
            storeFile file(KEYSTORE_FILE)
            storePassword KEYSTORE_PWD
            keyAlias KEY_ALIAS
            keyPassword KEY_PWD
        }
    }

    buildTypes {
        debug {
            // 显示Log
            buildConfigField "boolean", "LOG_DEBUG", "true"
            versionNameSuffix "-debug"
            minifyEnabled false
            zipAlignEnabled false
            shrinkResources false
            signingConfig signingConfigs.debug
        }

        release {
            // 不显示Log
            buildConfigField "boolean", "LOG_DEBUG", "false"
            //Zipalign优化
            zipAlignEnabled true
            // 移除无用的resource文件
            shrinkResources true
            //混淆
            minifyEnabled true
            //前一部分代表系统默认的android程序的混淆文件，该文件已经包含了基本的混淆声明，后一个文件是自己的定义混淆文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //签名
            signingConfig signingConfigs.release
            //http://blog.csdn.net/u014300915/article/details/78355420
            flavorDimensions 'api'
            //渠道Flavors，配置不同风格的app,友盟渠道统计时用到
            productFlavors {
                "offical" {}
                "360" {}
                yingyongbao {}
                wandoujia {}
                baidu {}
                "91" {}
            }
            productFlavors.all {
                flavor -> flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
            }
//            android.applicationVariants.all { variant ->
//                variant.outputs.all {
//                    outputFileName = "ygh_${variant.productFlavors[0].name}_v${variant.versionName}_${releaseTime()}.apk"
//                }
//            }
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:' + versions.supportLib
    compile 'com.android.support:design:' + versions.supportLib
    compile 'com.android.support:cardview-v7:' + versions.supportLib
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    testImplementation 'junit:junit:4.12'
    //网络框架
    compile 'com.squareup.retrofit2:retrofit:' + versions.retrofit
    compile 'com.squareup.retrofit2:converter-gson:' + versions.retrofit
    compile 'com.squareup.retrofit2:adapter-rxjava:' + versions.retrofit
    compile 'com.squareup.okhttp3:logging-interceptor:' + versions.okhttp
    compile 'io.reactivex:rxandroid:' + versions.rxjava
    compile 'io.reactivex:rxjava:' + versions.rxjava
    //图片加载框架
    compile 'com.github.bumptech.glide:glide:'+ versions.glide
    compile 'com.bm.photoview:library:'+ versions.photoview
    //数据库框架
    compile 'org.greenrobot:greendao:'+ versions.greendao
    //greendao数据库升级框架
    compile 'com.github.yuweiguocn:GreenDaoUpgradeHelper:'+ versions.greendaohelper
    //BaseRecyclerViewAdapterHelper
    compile 'com.github.CymChad:BaseRecyclerViewAdapterHelper:'+ versions.recyclerview
    //检测内存泄漏框架
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:'+ versions.leakcanary
    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:'+ versions.leakcanary
    //工具类框架
    compile 'com.blankj:utilcode:'+ versions.utilcode
    //本地通信框架
    compile 'org.greenrobot:eventbus:'+ versions.eventbus
    //依赖注入框架
    compile 'com.jakewharton:butterknife:'+ versions.butterknife
    annotationProcessor 'com.jakewharton:butterknife-compiler:'+ versions.butterknife
    //bugly异常搜集框架
    //注释掉原有bugly的仓库
    //compile 'com.tencent.bugly:crashreport:latest.release'//其中latest.release指代最新版本号，也可以指定明确的版本号，例如2.3.2
    compile 'com.tencent.bugly:crashreport_upgrade:latest.release'
    //其中latest.release指代最新版本号，也可以指定明确的版本号，例如1.2.0
    compile 'com.tencent.bugly:nativecrashreport:latest.release'
    // walle（多渠道使用）
    compile 'com.meituan.android.walle:library:'+ versions.walle
    // 多dex配置
    compile "com.android.support:multidex:"+ versions.multidex
    //友盟统计
    compile 'com.umeng.sdk:common:latest.integration'
    compile 'com.umeng.sdk:analytics:latest.integration'
    //material-dialog
    implementation 'com.afollestad.material-dialogs:core:'+ versions.materialdialogs
    implementation 'com.afollestad.material-dialogs:commons:'+ versions.materialdialogs
}
// 依赖插件脚本
apply from: 'tinker-support.gradle'
// 多渠道使用walle示例（注：多渠道使用）
//apply from: 'multiple-channel.gradle'
